Kubernetes is an open-source platform that automates the management, scaling, and deployment of containerized applications. It's also known as "k8s". 
-Provides highly resilient infrastructure with zero downtime deployment capabilities
-Automatic rollback(previous version)
-scaling
-selfhealing of containers(which consists of auto-placement,auto-restart,auto replication and scaling of containers on the basis of CPU usage)
-------------------------------------
Cluster
---------
Manager Node components(Server)
-API Server
-Controller manager
-Scheduler
-etcd
Worker Node components(Server)
-kubectl
-kube-proxy(Network Communication b/w containers running in different nodes)
-pod
-containers
---------------------------------------
Pods(Collection of 1 or more containers)
- A Pod is the smallest and most basic unit of deployment.
------------------
Pod Manifest file
------------------
apiVersion: V1
kind: Pod
metadata:
 name: my-pod
spec:
 containers:
 -name: my-container
  image: nginx:latest
  ports:
  -containerPort:8080
---------------------------------
Deployment(Collection of pods)
---------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 4
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-container
        image: nginx:latest
        ports:
        - containerPort: 8080
-----------------------------------
ReplicaSets(Replica's of Pod)
-----------------------------------
Services(Used for Network communication to access the application to the outer world)
-----------------------------------
-Cluster IP
 The default service type, which exposes the service on a cluster-internal IP address. it is accessible only within the cluster.
-Node port
 Exposes the services on a specific port on each node in the cluster. the service is accessible using the cluster node's IP addresses.
 Ex: Take external IP address of node and port(This port number is always above 30000 and it is auto generated by k8s)
 34.123.0.10:31217
 node ip address:portnumber
-Loadbalancer
 Provision a cloud provider's load balancer to distribute traffic to the service. external clients can access the services using a publicly accessible IP address.
-------------------------------------
Ingress Controller
-------------------------------------
In K8S, Ingress is an API object that provides external access to services with in cluster
It acts as a layer 7(application layer) load balancer, allowing external traffic to be routed to different services based on HTTPS/HTTPS routes and rules.
    USERS(apps)
      |
  Ingress Controller -----> Ingress Resource
      |
  Service APP
Replaces Multiple Loadbalances
You need to create a namespace ingress-nginx
kubectl create namespace ingress-nginx
kubectl apply -f #https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.1/deploy/static/provider/cloud/deploy.yaml
kubectl get all -n ingress-nginx
kubectl apply -f .\ingress_resource.yml
kubectl get ingress
kubectl get services -n ingress-nginx
-----------------
Configmaps
-----------------
Secrets
-----------------
Namespaces(Virtual Cluster)
-----------------------------
In K8S, Namespaces are a way to create virtual cluster within a physical cluster
They provide a way to divide cluster resources into logical groups,enabling multiple teams
Key Points
- Isolation: namespaces provide isolation b/w resources. objects in one namespaces are typically not aware of objects in other namespaces,unless explicitlly configured to communicate
- Resources Allocation: Resource like CPU, memory,storage, and network bandwith can be allocated and managed at the namespaces level. this allows for resource quotas and limits to be set for each namespace.
- Access Control: RBAC(Role-Based Access Control)
-Creating custom namespaces

Kubernetes has four default namespaces: default, kube-system,kube-public, and kube-node-lease.
The default namespace is where most objects are created by default.
The kube-system namespace contains system-related objects created by kubernetes itself.
The kube-public namespace is publicly readable and contains cluster-wide resources.
The kube-node-lease namespace is used by kubernetes nodes to communicate their lease status.
------------------------------------
Persistent Volumes
------------------------------------



Persistent Volume Clamis
Statefulsets

Command
--------
kubectl get all -A --> shows all the data in cluster
kubectl get nodes
kubectl get nodes -o wide
kubectl apply -f .\sample_deploy.yml
kubectl delete -f .\sample_deploy.yml
kubectl create -f <manifest_file>
kubectl get pods
kubectl get pods -o wide
kubectl describe pod <pod_name>
kubectl get deploy
kubectl describe deploy <deployment_name>
kubectl get deployment
kubectl get deployment -o wide
kubectl get replicaset
kubectl describe replicaset <replicaset_name>
kubectl edit deployment <deployment_name>
kubectl get pods -w
kubectl delete pod <pod-name>
kubectl get svc
kubectl describe svc <service_name>
kubectl get svc -w
kubectl get namespaces
-default
-kube-system
-kube-public
-kube-node-lease
kubectl get all -n kube-system
kubectl get all (by_default_namespace)
kubectl create namespace <my-namespace>
kubectl logs -f <pod_name>


t1
